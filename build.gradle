
// tag::buildfile1[]
buildscript {
    repositories {
        jcenter()
        maven { name = 'Defaults Plugin Repo'; url = 'http://dl.bintray.com/jmoore/java-lib' }
        maven { name = 'Gradle Plugin Portal'; url = 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }

    ext.kotlin_version = '1.0.6'
    ext.dokka_version = '0.9.9'

    dependencies {
        classpath 'com.mooregreatsoftware:gradle-defaults:4.0.0-rc.1'

        // Kotlin support
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        // AsciiDoctor documentation
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

plugins {
    id 'groovy'
    id 'com.jfrog.bintray' version '1.7.1'
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

apply plugin: 'com.mooregreatsoftware.defaults'

group = 'com.mooregreatsoftware'
description = 'Plugin providing opinionated defaults for Gradle projects.'

defaults {
    // make sure configuration is done for enforcing licenses, BinTray, etc.
    openSource = true

    compatibilityVersion = 1.8

    orgId = 'jdigger'

    bintrayRepo = 'java-lib'
    bintrayLabels = ['gradle', 'plugin']

    developers = [
        [id: 'jmoore', name: 'Jim Moore', email: 'moore.jim@gmail.com']
    ]

    copyrightYears = '2014-2016'

    vcsWriteUrl = "git@github.com:jdigger/gradle-defaults.git"

    lombok.version = "1.16.12"
    checkerFramework.version = "2.1.8"
}
// end::buildfile1[]

apply plugin: "kotlin"
apply plugin: 'org.jetbrains.dokka'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

apply plugin: 'org.asciidoctor.convert'

apply plugin: 'java-gradle-plugin'

githubPages {
    deleteExistingFiles = true
    pages {
        from asciidoctor
    }
}

asciidoctor {
    sourceDir = file('docs')
    separateOutputDirs = false
    outputDir = file("$buildDir/docs")
    attributes 'source-highlighter': 'coderay'
}

dokka {
    jdkVersion = 8
//    linkMapping {
//        dir = "src/main/kotlin"
//        url = "https://github.com/gradle/gradle/tree/master/subprojects/core/src/main/java"
////        suffix = "#L"
//    }
//    sourceDirs = files('src/main/kotlin')
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Spec.class"
    exclude "**/Abstract*Spec.class"
}

classes.mustRunAfter "copyMainKotlinClasses"

repositories {
    maven {
        name = 'Plugin Portal'
        url = 'https://plugins.gradle.org/m2/'
    }
}

dependencies {
    compile 'org.ajoberstar:gradle-git:1.3.2'
    compile 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1'
    compile 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'

    compile 'io.javaslang:javaslang:2.0.5'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    testCompile 'com.netflix.nebula:nebula-test:4.2.2'
    testCompile "org.gradle:gradle-tooling-api:${gradle.gradleVersion}" // hack to get the source
    testCompile "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // hack to get the source

    // tiny http server for testing
    testCompile 'org.nanohttpd:nanohttpd:2.3.1'

    // Lombok and Checker Framework support for tests
    def lombok_version = "1.16.8"
    def checker_version = "2.1.8"
    testCompile "org.projectlombok:lombok:$lombok_version"
    testCompile "org.checkerframework:checker:$checker_version"
    testCompile "org.checkerframework:checker-qual:$checker_version"
    testCompile "org.checkerframework:jdk8:$checker_version"
    testCompile "org.checkerframework:compiler:$checker_version"
}

wrapper {
    gradleVersion = '2.14.1'
}
